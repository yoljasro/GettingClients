import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer';

dotenv.config();

const mainBotToken = process.env.MAIN_BOT_TOKEN;
const clientBotToken = process.env.CLIENT_BOT_TOKEN;
const clientChatIds = process.env.CLIENT_CHAT_IDS.split(',').map(id => id.trim());

const mainBot = new TelegramBot(mainBotToken, { polling: true });
const clientBot = new TelegramBot(clientBotToken);

const SERVICE_KEYS = {
  bots: 'Telegram-–±–æ—Ç—ã',
  websites: '–í–µ–±-—Å–∞–π—Ç—ã',
  webapps: '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
  mobileapps: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
  marketing: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ',
  tg_subs: '–°–±–æ—Ä –∂–∏–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ Telegram-–∫–∞–Ω–∞–ª'
};

const SERVICE_DETAILS = {
  'Telegram-–±–æ—Ç—ã': [
    { question: '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ—Ç?', options: ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ó–∞–∫–∞–∑ —É—Å–ª—É–≥', 'FAQ', '–î—Ä—É–≥–æ–µ'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ –±–æ—Ç–µ?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–µ–Ω –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?', options: ['–î–∞', '–ù–µ—Ç'] }
  ],
  '–í–µ–±-—Å–∞–π—Ç—ã': [
    { question: '–ö–∞–∫–æ–π —Ç–∏–ø —Å–∞–π—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω?', options: ['–õ–µ–Ω–¥–∏–Ω–≥', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', '–ë–ª–æ–≥', '–î—Ä—É–≥–æ–µ'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ CMS?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ö–∞–∫–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã?', options: ['–ß–∞—Ç', '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏', 'CRM', '–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ –º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∞–π—Ç–∞?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É?', options: ['–î–∞, –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã', '–ù–µ—Ç, –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ'] }
  ],
  '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è': [
    { question: '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?', options: ['CRM', 'ERP', 'LMS', '–î—Ä—É–≥–æ–µ'] },
    { question: '–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è?', options: ['API', 'WebSocket', 'AI', '–î—Ä—É–≥–æ–µ'] },
    { question: '–°–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç?', options: ['1-2', '3-5', '–ë–æ–ª–µ–µ 5'] },
    { question: '–ù—É–∂–µ–Ω –ª–∏ –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–µ–Ω –ª–∏ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏?', options: ['–î–∞', '–ù–µ—Ç'] }
  ],
  '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è': [
    { question: '–î–ª—è –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º?', options: ['iOS', 'Android', '–û–±–µ'] },
    { question: '–ù—É–∂–Ω—ã –ª–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω?', options: ['E-commerce', '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–î—Ä—É–≥–æ–µ'] },
    { question: '–ö–∞–∫–∏–µ –º–æ–¥—É–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã?', options: ['–ß–∞—Ç', '–û–ø–ª–∞—Ç–∞', '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è', '–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?', options: ['–î–∞', '–ù–µ—Ç'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ –æ—Ñ–ª–∞–π–Ω-—Ä–∞–±–æ—Ç–∞?', options: ['–î–∞', '–ù–µ—Ç'] }
  ],
  '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ': [
    { question: '–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?', options: ['SEO', 'SMM', '–ö–æ–Ω—Ç–µ–∫—Å—Ç', '–í—Å–µ'] },
    { question: '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?', options: ['B2B', 'B2C', '–ù–µ –∑–Ω–∞—é'] },
    { question: '–ö–∞–∫–æ–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç?', options: ['–î–æ $100', '$100‚Äì500', '$500+'] },
    { question: '–ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?', options: ['–ë–∞–Ω–Ω–µ—Ä', '–í–∏–¥–µ–æ', 'Influencer-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–í—Å–µ'] },
    { question: '–ù—É–∂–Ω–∞ –ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–∫–∏–Ω–≥?', options: ['Google Analytics', 'Yandex.Metrika', '–ù–µ –Ω—É–∂–Ω–æ'] }
  ],
  '–°–±–æ—Ä –∂–∏–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ Telegram-–∫–∞–Ω–∞–ª': [
    { question: '–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å?', options: ['–î–æ 500', '500-1000', '1000+'] },
    { question: '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?', options: ['–ë–∏–∑–Ω–µ—Å', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', 'IT', '–î—Ä—É–≥–æ–µ'] },
    { question: '–ú–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è?', options: ['–¢–∞—Ä–≥–µ—Ç', '–í–∑–∞–∏–º–æ–ø–∏–∞—Ä', '–ë–æ—Ç—ã', '–í—Å–µ'] }
  ]
};

const users = new Map();

mainBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  users.set(chatId, { step: 'name' });
  mainBot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:');
});

mainBot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const user = users.get(chatId);
  const text = msg.text;

  if (!user || msg.text.startsWith('/start')) return;

  switch (user.step) {
    case 'name':
      user.name = text;
      user.step = 'phone';
      mainBot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
      break;
    case 'phone':
      user.phone = text;
      user.step = 'email';
      mainBot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:');
      break;
    case 'email':
      user.email = text;
      user.step = 'service';
      const buttons = Object.keys(SERVICE_KEYS).map(key => ([{
        text: SERVICE_KEYS[key],
        callback_data: `service:${key}`
      }]));
      buttons.push([{ text: '–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞', callback_data: 'otherService' }]);
      mainBot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞:', {
        reply_markup: { inline_keyboard: buttons }
      });
      break;
    case 'awaitingManualService':
      user.service = text;
      user.step = 'tz';
      askServiceDetails(chatId, user);
      break;
    case 'finalTZ':
      user.tz += `\n–î–æ–ø. –æ–ø–∏—Å–∞–Ω–∏–µ: ${text}`;
      sendToClientBot(chatId, user);
      break;
  }
});

mainBot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const user = users.get(chatId);
  const data = query.data;

  if (!user) return;

  if (data.startsWith('service:')) {
    const key = data.split(':')[1];
    user.service = SERVICE_KEYS[key];
    user.step = 'tz';
    askServiceDetails(chatId, user);
  } else if (data === 'otherService') {
    user.step = 'awaitingManualService';
    mainBot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –≤—Ä—É—á–Ω—É—é:');
  } else if (data === 'callInstead') {
    user.tz += '\n[–ö–ª–∏–µ–Ω—Ç –æ–±—ä—è—Å–Ω–∏—Ç –ø–æ –∑–≤–æ–Ω–∫—É]';
    sendToClientBot(chatId, user);
  } else if (data.startsWith('detail:')) {
    const answer = data.replace('detail:', '');
    user.tz = user.tz || '';
    user.tz += `\n–û—Ç–≤–µ—Ç: ${answer}`;
    const questions = SERVICE_DETAILS[user.service];
    if (user.tzStep < questions.length - 1) {
      user.tzStep++;
      sendDetailQuestion(chatId, user);
    } else {
      user.step = 'finalTZ';
      mainBot.sendMessage(chatId, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [[
            { text: '–û–±—ä—è—Å–Ω—é –ø–æ –∑–≤–æ–Ω–∫—É', callback_data: 'callInstead' }
          ]]
        }
      });
    }
  }
});

function askServiceDetails(chatId, user) {
  const questions = SERVICE_DETAILS[user.service];
  if (questions && questions.length > 0) {
    user.tzStep = 0;
    sendDetailQuestion(chatId, user);
  } else {
    mainBot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (TZ), –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–±—ä—è—Å–Ω—é –ø–æ –∑–≤–æ–Ω–∫—É¬ª.', {
      reply_markup: {
        inline_keyboard: [[
          { text: '–û–±—ä—è—Å–Ω—é –ø–æ –∑–≤–æ–Ω–∫—É', callback_data: 'callInstead' }
        ]]
      }
    });
  }
}

function sendDetailQuestion(chatId, user) {
  const step = user.tzStep;
  const questions = SERVICE_DETAILS[user.service];
  const q = questions[step];
  const options = q.options.map(option => [{ text: option, callback_data: `detail:${option}` }]);
  mainBot.sendMessage(chatId, q.question, {
    reply_markup: {
      inline_keyboard: options
    }
  });
}

function sendToClientBot(chatId, user) {
  const message = `
üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:

üë§ –ò–º—è: ${user.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}
üìß Email: ${user.email}
üõ†Ô∏è –°–µ—Ä–≤–∏—Å: ${user.service}
üìÑ TZ: ${user.tz || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
`;

  mainBot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!');

  clientChatIds.forEach(id => {
    clientBot.sendMessage(id, message).catch(err => {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É (${id}):`, err.message);
    });
  });

  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: process.env.EMAIL_RECEIVER,
    subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
    text: message
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error.message);
    } else {
      console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.response);
    }
  });

  users.delete(chatId);
}